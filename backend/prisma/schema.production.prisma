// This is your Prisma schema file for production (PostgreSQL),
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  roleId            String?
  role              Role?    @relation(fields: [roleId], references: [id], onDelete: SetNull)
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  isActive          Boolean  @default(true)
  isSuperAdmin      Boolean  @default(false)
  lastLoginAt       DateTime?
  emailVerified     Boolean  @default(false)
  emailVerifiedAt   DateTime?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  createdAssets     Asset[]
  createdWorkOrders WorkOrder[]
  assignedWorkOrders WorkOrder[]
  createdPMSchedules PMSchedule[] @relation("PMScheduleCreatedBy")
  assignedPMSchedules PMSchedule[] @relation("PMScheduleAssignedTo")

  @@index([organizationId])
  @@index([email])
  @@index([roleId])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String   // JSON string of permissions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
}

// ============================================
// ORGANIZATION MANAGEMENT
// ============================================

model Organization {
  id                String   @id @default(uuid())
  name              String
  description       String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  country           String?
  phone             String?
  email             String?
  website           String?
  logo              String?
  settings          String?  // JSON string for org-specific settings
  isActive          Boolean  @default(true)
  subscriptionTier  String   @default("free")
  subscriptionStatus String  @default("active")
  subscriptionExpires DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  users             User[]
  assets            Asset[]
  workOrders        WorkOrder[]
  locations         Location[]
  pmSchedules       PMSchedule[]
  moduleRequests    ModuleRequest[]
  moduleLicenses    ModuleLicense[]

  @@index([isActive])
  @@index([subscriptionTier])
}

// ============================================
// ASSET MANAGEMENT
// ============================================

model Asset {
  id                String    @id @default(uuid())
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdById       String
  createdBy         User @relation(fields: [createdById], references: [id], onDelete: Cascade)
  assetNumber       String
  name              String
  description       String?
  category          String?
  subcategory       String?
  manufacturer      String?
  model             String?
  serialNumber      String?
  locationId        String?
  location          Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  parentAssetId     String?
  parentAsset       Asset? @relation("AssetHierarchy", fields: [parentAssetId], references: [id], onDelete: SetNull)
  childAssets       Asset[] @relation("AssetHierarchy")
  status            String    @default("active")
  condition         String?
  purchaseDate      DateTime?
  warrantyExpiry    DateTime?
  purchasePrice     Float?
  currentValue      Float?
  supplier          String?
  notes             String?
  customFields      String?   // JSON string for custom fields
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  workOrders        WorkOrder[]
  pmSchedules       PMSchedule[]

  @@unique([organizationId, assetNumber])
  @@index([organizationId])
  @@index([category])
  @@index([status])
  @@index([locationId])
  @@index([parentAssetId])
}

// ============================================
// LOCATION MANAGEMENT
// ============================================

model Location {
  id                String    @id @default(uuid())
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  name              String
  description       String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  country           String?
  parentLocationId  String?
  parentLocation    Location? @relation("LocationHierarchy", fields: [parentLocationId], references: [id], onDelete: SetNull)
  childLocations    Location[] @relation("LocationHierarchy")
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  assets            Asset[]

  @@index([organizationId])
  @@index([parentLocationId])
  @@index([isActive])
}

// ============================================
// WORK ORDER MANAGEMENT
// ============================================

model WorkOrder {
  id                String    @id @default(uuid())
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdById       String
  createdBy         User @relation(fields: [createdById], references: [id], onDelete: Cascade)
  assignedToId      String?
  assignedTo        User? @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  workOrderNumber   String
  title             String
  description       String?
  priority          String    @default("medium")
  status            String    @default("open")
  category          String?
  assetId           String?
  asset             Asset? @relation(fields: [assetId], references: [id], onDelete: SetNull)
  scheduledStart    DateTime?
  scheduledEnd      DateTime?
  estimatedHours    Float?
  actualStart       DateTime?
  actualEnd         DateTime?
  laborCost         Float?
  partsCost         Float?
  totalCost         Float?
  notes             String?
  customFields      String?   // JSON string for custom fields
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  completedAt       DateTime?

  @@unique([organizationId, workOrderNumber])
  @@index([organizationId])
  @@index([status])
  @@index([priority])
  @@index([assignedToId])
  @@index([assetId])
  @@index([scheduledStart])
  @@index([createdAt])
}

// ============================================
// PREVENTIVE MAINTENANCE SCHEDULES
// ============================================

model PMSchedule {
  id              String    @id @default(uuid())
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  assetId         String?
  asset           Asset? @relation(fields: [assetId], references: [id], onDelete: SetNull)
  frequency       String
  frequencyValue  Int       @default(1)
  priority        String    @default("medium")
  status          String    @default("active")
  assignedToId    String?
  assignedTo      User? @relation("PMScheduleAssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)
  lastCompleted   DateTime?
  nextDue         DateTime?
  tasks           String?
  parts           String?
  estimatedHours  Float?
  createdById     String
  createdBy       User @relation("PMScheduleCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([organizationId])
  @@index([status])
  @@index([nextDue])
  @@index([assetId])
  @@index([assignedToId])
}

// ============================================
// MODULE LICENSING
// ============================================

model ModuleLicense {
  id                String    @id @default(uuid())
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  moduleCode        String
  moduleName        String
  tier              String
  status            String    @default("active")
  startDate         DateTime
  endDate           DateTime?
  maxUsers          Int?
  features          String?   // JSON string of enabled features
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([organizationId, moduleCode])
  @@index([organizationId])
  @@index([moduleCode])
  @@index([status])
}

// ============================================
// MODULE REQUESTS
// ============================================

model ModuleRequest {
  id                String    @id @default(uuid())
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  moduleCode        String
  moduleName        String
  tier              String
  requestType       String    // 'trial', 'purchase', 'upgrade'
  status            String    @default("pending")
  requestedBy       String?   // User ID who made the request
  approvedBy        String?   // Admin who approved/rejected
  approvedAt        DateTime?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([organizationId])
  @@index([moduleCode])
  @@index([status])
  @@index([requestType])
}
